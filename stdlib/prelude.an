/*
        prelude.an
    Standard functions and datatypes pre-imported
    into every Ante source file.
*/

//C functions
fun printf: ref c8 fmt, ... -> i32
fun puts: ref c8 str -> i32
fun putchar: c8 char
fun getchar: -> c8
fun exit: i32 status
fun malloc: usz size -> ref void
fun calloc: usz num size -> ref void
fun realloc: ref void ptr, usz size -> ref void
fun free: ref void mem
fun memcpy: ref void dest src, usz bytes -> ref void /*dest*/
fun system: ref c8 cmd -> i32
fun strlen: ref c8 str -> usz

//C stdio
type File = ref void
type FilePos = ref void

type InFile = File
type OutFile = File

fun fopen: ref c8 fName, ref c8 mode -> File
fun fclose: File file

fun fputs: ref c8 str, OutFile file
fun fputc: c8 char, OutFile file
fun fgetc: InFile file -> c8
fun fgets: ref c8 str, i32 numBytes, InFile file -> ref c8
fun ungetc: c8 c, InFile file -> i32

fun fgetpos: File f, FilePos fp
fun ftell: File f -> i64
fun fsetpos: File f, FilePos fp
fun fseek: File f, i64 offset, i32 origin

fun feof: InFile f -> bool
fun ferror: File f -> bool



//Ante datatypes
type Str = ref c8 cStr, usz len

type Maybe 't =
   | Some 't
   | None

type Type = ref void

fun (=): Maybe l r -> bool
    match l with
    | Some lv ->
        match r with
        | Some rv -> lv = rv
        | None -> false
    | None ->
        match r with
        | Some rv -> false
        | None -> true

fun Str.init: Maybe l -> Str
    match l with
    | Some val -> Str val
    | None -> "None"


//Compile-time functions

//prints type and value (llvm dump) of variable while compiling
ante fun Ante.debug: 't t

//returns the size of a type in Bytes.  Accepts types or values as an argument
ante fun Ante.sizeof: 't t -> usz

//return the type of an expression.  Note: Type is an ante type (compile-time only)
ante fun Ante.typeof: 't t -> Type

//Note: error never returns
ante fun Ante.error: ref c8 msg

//dumps llvm-ir to stdout
ante fun Ante.emit_ir:

//useful in the repl to redefine functions
ante fun Ante.forget: ref c8 function_name


//numerical print functions
!inline
fun i8.printne: i8 x
    printf "%hhd".cStr x

!inline
fun i16.printne: i16 x
    printf "%hd".cStr x

!inline
fun i32.printne: i32 x
    printf "%d".cStr x

!inline
fun i64.printne: i64 x
    printf "%ld".cStr x

!inline
fun isz.printne: isz x
    printf "%zi".cStr x

//unsigned
!inline
fun u8.printne: u8 x
    printf "%hhu".cStr x

!inline
fun u16.printne: u16 x
    printf "%hu".cStr x

!inline
fun u32.printne: u32 x
    printf "%u".cStr x

!inline
fun u64.printne: u64 x
    printf "%lu".cStr x

!inline
fun usz.printne: usz x
    printf "%zu".cStr x

//floats
!inline
fun f16.printne: f16 x
    printf "%.2f".cStr (f64 x)

!inline
fun f32.printne: f32 x
    printf "%f".cStr (f64 x)

!inline
fun f64.printne: f64 x
    printf "%.14f".cStr x

//char
!inline
fun c8.printne: c8 x
    printf "%c".cStr x

//bool
!inline
fun bool.printne: bool b
    if b then printf "true".cStr
    else printf "false".cStr

//c-string
!inline
fun printne: ref c8 s
    printf "%s".cStr s


!inline
fun printne: Str s
    printne s.cStr


!inline
fun printne: 't x
    printf "%s".cStr (Str x).cStr

!inline
fun print: 't x
    printne x
    puts "".cStr


!inline
fun ref c8.init: Str s = s.cStr


fun Str.reverse: Str s -> Str
    mut buf = ref c8 malloc (s.len + 1)

    mut i = 0usz
    while i < s.len do
        buf#i := s.cStr#(s.len-i-1)
        i += 1

    buf#i := '\0'
    Str(buf, i)


fun Str.init: i64 i -> Str
    if i = 0 then return "0"
    mut len = 0usz
    mut buf = ref c8 malloc 21
    buf#20 := '\0'

    mut x = i
    let isNeg = i < 0 and ((x *= -1); true)

    while x != 0 do
        len += 1
        buf#(20 - len) := '0' + c8(x % 10)
        x /= 10

    if isNeg then
        len += 1
        buf#(20 - len) := '-'

    Str(buf + (20 - len), len)

fun Str.init: u64 i -> Str
    if i = 0 then return "0"
    mut len = 0usz
    mut buf = ref c8 malloc 21
    buf#20 := '\0'

    mut x = i
    while x != 0 do
        len += 1
        buf#(20 - len) := '0' + c8(x % 10)
        x /= 10

    Str(buf + (20 - len), len)


!inline fun Str.init: i8 x = Str (i64 x)
!inline fun Str.init: i16 x = Str (i64 x)
!inline fun Str.init: i32 x = Str (i64 x)
!inline fun Str.init: isz x = Str (i64 x)

!inline fun Str.init: u8 x = Str (u64 x)
!inline fun Str.init: u16 x = Str (u64 x)
!inline fun Str.init: u32 x = Str (u64 x)
!inline fun Str.init: usz x = Str (u64 x)


fun u64.parse: Str s -> Maybe u64
    mut i = 0
    mut sum = 0u64

    while s#i != '\0' do
        let c = s#i
        if c >= '0' and c <= '9' then
            sum *= 10
            sum += c - '0'
            i += 1
        else
            return None

    Some sum

fun i64.parse: Str s -> Maybe i64
    mut i = 0
    mut sum = 0i64
    let isNeg =
        if s.len != 0 and s#0 = '-' then
            i += 1
            true
        else false

    while s#i != '\0' do
        let c = s#i
        if c >= '0' and c <= '9' then
            sum *= 10
            sum += c - '0'
            i += 1
        else
            return None

    Some (if isNeg then -1 * sum else sum)


//Pointer Equivalence
!inline
fun (=): ref 't l r =
    @l = @r

//ref void have no element, so structural equivalence is an error
fun (=): ref void l r =
    Ante.error "Cannot call = on a ref void!  Use 'is' to compare addresses!".cStr

//For-loops work over any range that is Iterable
trait Iterable 'i
    fun into_iter: Iterable i -> Iterator

trait Iterator 'i
    fun next: Iterator i -> Iterator
    fun unwrap: Iterator i -> 't
    fun has_next: Iterator i -> bool


type Range = i32 start end step

//returns true if a is in the range r
fun (in): i32 a, Range r -> bool
    if r.step = 1 then
        r.start <= a and a < r.end
    else
        let a_adj = a % r.step
        let s_adj = r.start % r.step

        a_adj = s_adj and r.start <= a and a < r.end

//creates an inclusive range
fun (..): i32 start end -> Range
    Range(start, end, 1)

//Takes a tuple of the first two integers and calculates the step by their difference
fun (..): i32,i32 first_two, i32 end -> Range
    Range(first_two#0, end, first_two#1 - first_two#0)

ext Range: Iterator
    fun next: Range r -> Range
        Range(r.start+r.step, r.end, r.step)

    fun unwrap: Range r =
        r.start

    fun has_next: Range r =
        if r.step > 0 then
            r.start < r.end
        elif r.step < 0 then
            r.start > r.end
        else false //step = 0


//Iterating through an InFile iterates through each line
ext InFile: Iterator
    fun has_next: InFile f = not feof f

    fun next: InFile f = f

    fun unwrap: InFile f = next_line f


!inline
fun OutFile.write: OutFile f, ref c8 cStr
    fputs cStr f

!inline
fun OutFile.write: OutFile f, c8 c
    fputc c f

!inline
fun OutFile.write: OutFile f, Str s
    fputs (s.cStr) f

//Str functions
!inline
fun Str.print: Str s
    puts s.cStr


!inline
fun Str.init: ref c8 cStr -> Str
    Str(cStr, usz strlen cStr)


fun (=): Str l r -> bool
    if l.len != r.len then
        return false

    for i in 0 .. i32 l.len do
        if l.cStr#i != r.cStr#i then
            return false
    true

!inline
fun (is): Str l r = l.cStr is r.cStr

!inline
fun (!=): 't l r = not(l = r)

!inline
fun (isnt): 't l r = not(l is r)


fun (++): Str s1 s2 -> Str
    if s1.len = 0 then return s2
    if s2.len = 0 then return s1

    let len = s1.len + s2.len
    mut buf = malloc (len+1)

    memcpy buf (ref void s1.cStr) s1.len

    mut buf_offset = (usz buf + s1.len) as ref void
    memcpy buf_offset (ref void s2.cStr) (s2.len+1) //copy terminating null too

    Str(ref c8 buf, len)

!inline
fun (#): Str s, i32 index = s.cStr#index

!inline
fun (#): Str s, i32 i, c8 c
    s.cStr#i := c


//IO
!inline
fun InFile.init: Str fName -> InFile
    InFile fopen (fName.cStr) "r".cStr


!inline
fun OutFile.init: Str fName -> OutFile
    OutFile fopen (fName.cStr) "w".cStr


fun InFile.next_line: InFile f -> Str
    if feof f then return ""
    let eof = c8 255

    mut len = 0usz
    mut cap = 64usz
    mut cstr = ref c8 malloc cap

    while
        let c = fgetc f

        if c = eof then break

        //Flag feof if eof occurs after terminating newline
        if c = '\n' then
            let peek = fgetc f
            if peek != eof then ungetc peek f
            break

        if len+1 >= cap then
            cap *= 2
            cstr := ref c8 realloc (ref void cstr) cap

        cstr#len := c
        len += 1
        true
    do ()

    cstr#len := '\0'
    Str(cstr, len)


//print a message then return user input
fun input: ref c8 msg -> Str
    mut len = 0usz
    mut cstr = ref c8 0

    printne msg

    while
        let c = getchar ()
        if len % 32 = 0 then
            cstr := ref c8 realloc (ref void cstr) (len+32)

        cstr#len := c
        len += 1
        c != '\n'
    do ()

    len -= 1
    cstr#len := '\0'
    Str(cstr, len)
